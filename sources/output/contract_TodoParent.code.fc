#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "contract_TodoParent.headers.fc";
#include "contract_TodoParent.stdlib.fc";
#include "contract_TodoParent.storage.fc";

;;
;; Contract TodoParent functions
;;

(int, cell) $TodoParent$_contract_init() impure inline_ref {
    var (($self'numChildren, $self'BetList)) = (null(), null());
    $self'numChildren = 0;
    $self'BetList = null();
    return ($self'numChildren, $self'BetList);
}

((int, cell), int) $TodoParent$_fun_numChildren((int, cell) $self) impure inline_ref {
    var (($self'numChildren, $self'BetList)) = $self;
    return (($self'numChildren, $self'BetList), $self'numChildren);
}

((int, cell), cell) $TodoParent$_fun_getAllAddresses((int, cell) $self) impure inline_ref {
    var (($self'numChildren, $self'BetList)) = $self;
    return (($self'numChildren, $self'BetList), $self'BetList);
}

;;
;; Receivers of a Contract TodoParent
;;

(((int, cell)), ()) $TodoParent$_internal_binary_BetInfoInit((int, cell) $self, (slice, slice, slice, slice, slice) $msg) impure inline {
    var ($self'numChildren, $self'BetList) = $self;
    var ($msg'title, $msg'source, $msg'bet_a_name, $msg'bet_b_name, $msg'image) = $msg;
    $self'numChildren = ($self'numChildren + 1);
    var ($init'code, $init'data) = $TestContract$_init_child(__tact_context_sys, $self'numChildren);
    slice $childAddress = $global_contractAddress(($init'code, $init'data));
    $self'BetList~__tact_dict_set_int_slice(257, $self'numChildren, $childAddress);
    $global_send($SendParameters$_constructor_to_value_mode_code_data_body($global_contractAddress(($init'code, $init'data)), 100000000, 2, $init'code, $init'data, $BetInfoInit$_store_cell(($msg'title, $msg'source, $msg'bet_a_name, $msg'bet_b_name, $msg'image))));
    return (($self'numChildren, $self'BetList), ());
}

(((int, cell)), ()) $TodoParent$_internal_binary_Deploy((int, cell) $self, (int) $deploy) impure inline {
    var ($self'numChildren, $self'BetList) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'numChildren, $self'BetList)~$TodoParent$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'numChildren, $self'BetList), ());
}

;;
;; Get methods of a Contract TodoParent
;;

_ %numChildren() method_id(115153) {
    var self = $TodoParent$_contract_load();
    var res = self~$TodoParent$_fun_numChildren();
    return res;
}

_ %getAllAddresses() method_id(108251) {
    var self = $TodoParent$_contract_load();
    var res = self~$TodoParent$_fun_getAllAddresses();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmTjfpZrkYHgAVJJ4jJKkjFDbEy7mehFLcB5vMFhNiPEEB";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TodoParent
;;

((int, cell), int) $TodoParent$_contract_router_internal((int, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive BetInfoInit message
    if (op == 2955413279) {
        var msg = in_msg~$BetInfoInit$_load();
        self~$TodoParent$_internal_binary_BetInfoInit(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$TodoParent$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TodoParent$_contract_load();
    
    ;; Handle operation
    int handled = self~$TodoParent$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TodoParent$_contract_store(self);
}
