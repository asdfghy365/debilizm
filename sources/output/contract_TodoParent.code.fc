#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "contract_TodoParent.headers.fc";
#include "contract_TodoParent.stdlib.fc";
#include "contract_TodoParent.storage.fc";

;;
;; Contract TodoParent functions
;;

(slice, int, cell, cell, cell) $TodoParent$_contract_init() impure inline_ref {
    var (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets)) = (null(), null(), null(), null(), null());
    $self'numChildren = 0;
    $self'BetList = null();
    $self'owner = __tact_context_get_sender();
    $self'UserBets = null();
    return ($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets);
}

((cell, int), ()) $BetArray$_fun_append((cell, int) $self, (slice, int, slice, int) $item) impure inline_ref {
    var (($self'map, $self'length)) = $self;
    var (($self'map, $self'length)) = $self;
    var (($item'user, $item'amount, $item'betContract, $item'outcome)) = $item;
    throw_unless(12446, (($self'length + 1) <= 5000));
    $self'map~__tact_dict_set_int_cell(257, $self'length, $BetDetails$_store_cell(($item'user, $item'amount, $item'betContract, $item'outcome)));
    $self'length = $self'length + 1;
    return (($self'map, $self'length), ());
}

((slice, int, cell, cell, cell), ()) $TodoParent$_fun_withdraw((slice, int, cell, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets)) = $self;
    $global_send($SendParameters$_constructor_to_value_mode($self'owner, 0, 128));
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), ());
}

((slice, int, cell, cell, cell), int) $TodoParent$_fun_numChildren((slice, int, cell, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets)) = $self;
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), $self'numChildren);
}

((slice, int, cell, cell, cell), cell) $TodoParent$_fun_UserBetInfo((slice, int, cell, cell, cell) $self, slice $user) impure inline_ref {
    var (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets)) = $self;
    if (null?($BetArray$_load_opt(__tact_dict_get_slice_cell($self'UserBets, 267, $user)))) {
        return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), null());
    }
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), $BetArray$_get_map($BetArray$_not_null($BetArray$_load_opt(__tact_dict_get_slice_cell($self'UserBets, 267, $user)))));
}

((slice, int, cell, cell, cell), cell) $TodoParent$_fun_getAllAddresses((slice, int, cell, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets)) = $self;
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), $self'BetList);
}

;;
;; Receivers of a Contract TodoParent
;;

(((slice, int, cell, cell, cell)), ()) %$TodoParent$_internal_empty((slice, int, cell, cell, cell) $self) impure inline {
    var ($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets) = $self;
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), ());
}

((slice, int, cell, cell, cell), ()) $TodoParent$_internal_text_095190194aee611ce895c5503adf85fd864de7905746142f608d3eb2faad14e4((slice, int, cell, cell, cell) $self) impure inline {
    var ($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets) = $self;
    ($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets)~$TodoParent$_fun_withdraw();
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), ());
}

(((slice, int, cell, cell, cell)), ()) $TodoParent$_internal_binary_BetInfoInit((slice, int, cell, cell, cell) $self, (slice, slice, slice, slice, slice) $msg) impure inline {
    var ($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets) = $self;
    var ($msg'title, $msg'source, $msg'bet_a_name, $msg'bet_b_name, $msg'image) = $msg;
    $self'numChildren = ($self'numChildren + 1);
    var ($init'code, $init'data) = $TestContract$_init_child(__tact_context_sys, $self'numChildren);
    slice $childAddress = $global_contractAddress(($init'code, $init'data));
    $global_send($SendParameters$_constructor_to_value_mode_code_data_body($global_contractAddress(($init'code, $init'data)), 100000000, 2, $init'code, $init'data, $BetInfoInit$_store_cell(($msg'title, $msg'source, $msg'bet_a_name, $msg'bet_b_name, $msg'image))));
    $self'BetList~__tact_dict_set_int_slice(257, $self'numChildren, $childAddress);
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), ());
}

(((slice, int, cell, cell, cell)), ()) $TodoParent$_internal_binary_BetDetailsMessage((slice, int, cell, cell, cell) $self, (slice, int, slice, int) $msg) impure inline {
    var ($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets) = $self;
    var ($msg'user, $msg'amount, $msg'betContract, $msg'outcome) = $msg;
    tuple $userBetArrayOpt = $BetArray$_load_opt(__tact_dict_get_slice_cell($self'UserBets, 267, $msg'user));
    var ($userBetArray'map, $userBetArray'length) = ((~ null?($userBetArrayOpt)) ? $BetArray$_not_null($userBetArrayOpt) : $BetArray$_constructor_map_length(null(), 0));
    ($userBetArray'map, $userBetArray'length)~$BetArray$_fun_append($BetDetails$_tensor_cast($BetDetails$_constructor_user_amount_betContract_outcome($msg'user, $msg'amount, $msg'betContract, $msg'outcome)));
    $self'UserBets~__tact_dict_set_slice_cell(267, $msg'user, $BetArray$_store_cell(($userBetArray'map, $userBetArray'length)));
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), ());
}

(((slice, int, cell, cell, cell)), ()) $TodoParent$_internal_binary_Deploy((slice, int, cell, cell, cell) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets)~$TodoParent$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'numChildren, $self'BetList, $self'AllBets, $self'UserBets), ());
}

;;
;; Get methods of a Contract TodoParent
;;

_ %numChildren() method_id(115153) {
    var self = $TodoParent$_contract_load();
    var res = self~$TodoParent$_fun_numChildren();
    return res;
}

_ %UserBetInfo(slice $$user) method_id(86585) {
    slice $user = __tact_verify_address($$user);
    var self = $TodoParent$_contract_load();
    var res = self~$TodoParent$_fun_UserBetInfo($user);
    return res;
}

_ %getAllAddresses() method_id(108251) {
    var self = $TodoParent$_contract_load();
    var res = self~$TodoParent$_fun_getAllAddresses();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmdSpebHm4oWGhdCWZednVn4xVRLrDBL4tvNSEBLeEUe7R";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TodoParent
;;

((slice, int, cell, cell, cell), int) $TodoParent$_contract_router_internal((slice, int, cell, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$TodoParent$_internal_empty();
        return (self, true);
    }
    
    ;; Receive BetInfoInit message
    if (op == 2955413279) {
        var msg = in_msg~$BetInfoInit$_load();
        self~$TodoParent$_internal_binary_BetInfoInit(msg);
        return (self, true);
    }
    
    ;; Receive BetDetailsMessage message
    if (op == 3696589863) {
        var msg = in_msg~$BetDetailsMessage$_load();
        self~$TodoParent$_internal_binary_BetDetailsMessage(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$TodoParent$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "withdraw" message
        if (text_op == 0x095190194aee611ce895c5503adf85fd864de7905746142f608d3eb2faad14e4) {
            self~$TodoParent$_internal_text_095190194aee611ce895c5503adf85fd864de7905746142f608d3eb2faad14e4();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TodoParent$_contract_load();
    
    ;; Handle operation
    int handled = self~$TodoParent$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TodoParent$_contract_store(self);
}
