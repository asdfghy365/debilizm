;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline {
    return (true, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice to, int value, int mode, cell code, cell data, cell body) inline {
    return (true, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Data
;; TLB: _ total_bet_a:uint32 total_bet_b:uint32 odds_a:uint32 odds_b:uint32 bets_a:dict<address, int> bets_b:dict<address, int> finalized:bool outcome_a_wins:bool insufficient_balance:bool = Data
;;

builder $Data$_store(builder build_0, (int, int, int, int, cell, cell, int, int, int) v) inline_ref {
    var (v'total_bet_a, v'total_bet_b, v'odds_a, v'odds_b, v'bets_a, v'bets_b, v'finalized, v'outcome_a_wins, v'insufficient_balance) = v;
    build_0 = build_0.store_uint(v'total_bet_a, 32);
    build_0 = build_0.store_uint(v'total_bet_b, 32);
    build_0 = build_0.store_uint(v'odds_a, 32);
    build_0 = build_0.store_uint(v'odds_b, 32);
    build_0 = build_0.store_dict(v'bets_a);
    build_0 = build_0.store_dict(v'bets_b);
    build_0 = build_0.store_int(v'finalized, 1);
    build_0 = build_0.store_int(v'outcome_a_wins, 1);
    build_0 = build_0.store_int(v'insufficient_balance, 1);
    return build_0;
}

(slice, ((int, int, int, int, cell, cell, int, int, int))) $Data$_load(slice sc_0) inline_ref {
    var v'total_bet_a = sc_0~load_uint(32);
    var v'total_bet_b = sc_0~load_uint(32);
    var v'odds_a = sc_0~load_uint(32);
    var v'odds_b = sc_0~load_uint(32);
    var v'bets_a = sc_0~load_dict();
    var v'bets_b = sc_0~load_dict();
    var v'finalized = sc_0~load_int(1);
    var v'outcome_a_wins = sc_0~load_int(1);
    var v'insufficient_balance = sc_0~load_int(1);
    return (sc_0, (v'total_bet_a, v'total_bet_b, v'odds_a, v'odds_b, v'bets_a, v'bets_b, v'finalized, v'outcome_a_wins, v'insufficient_balance));
}

((int, int, int, int, cell, cell, int, int, int)) $Data$_constructor_total_bet_a_total_bet_b_odds_a_odds_b_bets_a_bets_b_finalized_outcome_a_wins_insufficient_balance(int total_bet_a, int total_bet_b, int odds_a, int odds_b, cell bets_a, cell bets_b, int finalized, int outcome_a_wins, int insufficient_balance) inline {
    return (total_bet_a, total_bet_b, odds_a, odds_b, bets_a, bets_b, finalized, outcome_a_wins, insufficient_balance);
}

;;
;; Type: TrumpBiden
;; TLB: _ bet_a_name:^string bet_b_name:^string image:^string odds_a:uint32 odds_b:uint32 = TrumpBiden
;;

builder $TrumpBiden$_store(builder build_0, (slice, slice, slice, int, int) v) inline {
    var (v'bet_a_name, v'bet_b_name, v'image, v'odds_a, v'odds_b) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'bet_a_name).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'bet_b_name).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'image).end_cell());
    build_0 = build_0.store_uint(v'odds_a, 32);
    build_0 = build_0.store_uint(v'odds_b, 32);
    return build_0;
}

(slice, ((slice, slice, slice, int, int))) $TrumpBiden$_load(slice sc_0) inline {
    var v'bet_a_name = sc_0~load_ref().begin_parse();
    var v'bet_b_name = sc_0~load_ref().begin_parse();
    var v'image = sc_0~load_ref().begin_parse();
    var v'odds_a = sc_0~load_uint(32);
    var v'odds_b = sc_0~load_uint(32);
    return (sc_0, (v'bet_a_name, v'bet_b_name, v'image, v'odds_a, v'odds_b));
}

(slice, slice, slice, int, int) $TrumpBiden$_to_external(((slice, slice, slice, int, int)) v) inline {
    var (v'bet_a_name, v'bet_b_name, v'image, v'odds_a, v'odds_b) = v; 
    return (v'bet_a_name, v'bet_b_name, v'image, v'odds_a, v'odds_b);
}

((slice, slice, slice, int, int)) $TrumpBiden$_constructor_bet_a_name_bet_b_name_image_odds_a_odds_b(slice bet_a_name, slice bet_b_name, slice image, int odds_a, int odds_b) inline {
    return (bet_a_name, bet_b_name, image, odds_a, odds_b);
}

;;
;; Type: Finalize
;; Header: 0xd23bb096
;; TLB: finalize#d23bb096 outcome_a_wins:bool = Finalize
;;

(slice, ((int))) $Finalize$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3527127190);
    var v'outcome_a_wins = sc_0~load_int(1);
    return (sc_0, (v'outcome_a_wins));
}

;;
;; Type: TestContract
;;

builder $TestContract$_store(builder build_0, (slice, int, (int, int, int, int, cell, cell, int, int, int), int, slice, (slice, slice, slice, int, int)) v) inline {
    var (v'owner, v'stopped, (v'data'total_bet_a, v'data'total_bet_b, v'data'odds_a, v'data'odds_b, v'data'bets_a, v'data'bets_b, v'data'finalized, v'data'outcome_a_wins, v'data'insufficient_balance), v'seqno, v'newContractAddress, (v'trumpBidenData'bet_a_name, v'trumpBidenData'bet_b_name, v'trumpBidenData'image, v'trumpBidenData'odds_a, v'trumpBidenData'odds_b)) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'stopped, 1);
    build_0 = $Data$_store(build_0, (v'data'total_bet_a, v'data'total_bet_b, v'data'odds_a, v'data'odds_b, v'data'bets_a, v'data'bets_b, v'data'finalized, v'data'outcome_a_wins, v'data'insufficient_balance));
    build_0 = build_0.store_uint(v'seqno, 64);
    build_0 = __tact_store_address(build_0, v'newContractAddress);
    var build_1 = begin_cell();
    build_1 = $TrumpBiden$_store(build_1, (v'trumpBidenData'bet_a_name, v'trumpBidenData'bet_b_name, v'trumpBidenData'image, v'trumpBidenData'odds_a, v'trumpBidenData'odds_b));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, (int, int, int, int, cell, cell, int, int, int), int, slice, (slice, slice, slice, int, int)))) $TestContract$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'stopped = sc_0~load_int(1);
    var v'data = sc_0~$Data$_load();
    var v'seqno = sc_0~load_uint(64);
    var v'newContractAddress = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'trumpBidenData = sc_1~$TrumpBiden$_load();
    return (sc_0, (v'owner, v'stopped, v'data, v'seqno, v'newContractAddress, v'trumpBidenData));
}

builder $TestContract$init$_store(builder build_0, (int) v) inline {
    var (v'seqno) = v;
    build_0 = build_0.store_int(v'seqno, 257);
    return build_0;
}

(slice, ((int))) $TestContract$init$_load(slice sc_0) inline {
    var v'seqno = sc_0~load_int(257);
    return (sc_0, (v'seqno));
}

(slice, int, (int, int, int, int, cell, cell, int, int, int), int, slice, (slice, slice, slice, int, int)) $TestContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TestContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int seqno) = $sc~$TestContract$init$_load();
        $sc.end_parse();
        return $TestContract$_contract_init(seqno);
    }
}

() $TestContract$_contract_store((slice, int, (int, int, int, int, cell, cell, int, int, int), int, slice, (slice, slice, slice, int, int)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TestContract$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $TestContract$_init_child(cell sys', int $seqno) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: TestContract
    cell mine = __tact_dict_get_code(source, 63070);
    contracts = __tact_dict_set_code(contracts, 63070, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $TestContract$init$_store(b, ($seqno));
    return (mine, b.end_cell());
}