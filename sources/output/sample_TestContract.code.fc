#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_TestContract.headers.fc";
#include "sample_TestContract.stdlib.fc";
#include "sample_TestContract.storage.fc";

;;
;; Contract TestContract functions
;;

((int, int, cell, cell, int, slice)) $TestContract$_contract_init() impure inline_ref {
    var ((($self'data'total_bet_a, $self'data'total_bet_b, $self'data'bets_a, $self'data'bets_b, $self'data'finalized, $self'data'admin))) = (null());
    ($self'data'total_bet_a, $self'data'total_bet_b, $self'data'bets_a, $self'data'bets_b, $self'data'finalized, $self'data'admin) = $Data$_constructor_total_bet_a_total_bet_b_bets_a_bets_b_finalized_admin(0, 0, $global_emptyCell(), $global_emptyCell(), false, begin_parse(end_cell(begin_cell())));
    return (($self'data'total_bet_a, $self'data'total_bet_b, $self'data'bets_a, $self'data'bets_b, $self'data'finalized, $self'data'admin));
}

(((int, int, cell, cell, int, slice)), ()) $TestContract$_fun_handle_bet(((int, int, cell, cell, int, slice)) $self, int $bet_on_a, int $bet_amount) impure inline_ref {
    var ((($self'data'total_bet_a, $self'data'total_bet_b, $self'data'bets_a, $self'data'bets_b, $self'data'finalized, $self'data'admin))) = $self;
    throw_unless(63076, (~ $self'data'finalized));
    if ($bet_on_a) {
        $self'data'total_bet_a = $self'data'total_bet_a + $bet_amount;
        builder $bets_a_builder = store_uint(store_slice(begin_cell(), begin_parse($self'data'bets_a)), $bet_amount, 32);
        $self'data'bets_a = end_cell($bets_a_builder);
    } else {
        $self'data'total_bet_b = $self'data'total_bet_b + $bet_amount;
        builder $bets_b_builder = store_uint(store_slice(begin_cell(), begin_parse($self'data'bets_b)), $bet_amount, 32);
        $self'data'bets_b = end_cell($bets_b_builder);
    }
    return ((($self'data'total_bet_a, $self'data'total_bet_b, $self'data'bets_a, $self'data'bets_b, $self'data'finalized, $self'data'admin)), ());
}

;;
;; Receivers of a Contract TestContract
;;

(((int, int, cell, cell, int, slice)), ()) $TestContract$_internal_any(((int, int, cell, cell, int, slice)) $self, slice $msg) impure inline {
    var (($self'data'total_bet_a, $self'data'total_bet_b, $self'data'bets_a, $self'data'bets_b, $self'data'finalized, $self'data'admin)) = $self;
    slice $msg_body = $msg;
    int $bet_type = $msg_body~load_uint(1);
    int $bet_amount = $msg_body~load_coins();
    int $bet_on_a = ($bet_type == 0);
    (($self'data'total_bet_a, $self'data'total_bet_b, $self'data'bets_a, $self'data'bets_b, $self'data'finalized, $self'data'admin))~$TestContract$_fun_handle_bet($bet_on_a, $bet_amount);
    return ((($self'data'total_bet_a, $self'data'total_bet_b, $self'data'bets_a, $self'data'bets_b, $self'data'finalized, $self'data'admin)), ());
}

;;
;; Get methods of a Contract TestContract
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmWEPE6bxvPVKJZ5cVw1Dr7LzPmwUVLQjpyaqi81SfkXiv";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TestContract
;;

(((int, int, cell, cell, int, slice)), int) $TestContract$_contract_router_internal(((int, int, cell, cell, int, slice)) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receiver fallback
    self~$TestContract$_internal_any(in_msg);
    return (self, true);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TestContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$TestContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TestContract$_contract_store(self);
}
