import "@stdlib/deploy";
import "@stdlib/ownable";
import "@stdlib/stoppable";

struct Bet {
    address: Address;
    amount: Int as uint32;
}

struct Data {
    total_bet_a: Int as uint32;
    total_bet_b: Int as uint32;
    odds_a: Int as uint32;
    odds_b: Int as uint32;
    bets_a: map<Address, Int>;
    bets_b: map<Address, Int>;
    bets_total: map<Address, Int>;
    finalized: Bool;
    outcome_a_wins: Bool;
    insufficient_balance: Bool;
}

struct BetInfo {
    title: String;
    source: String;
    bet_a_name: String;
    bet_b_name: String;
    image: String;
    odds_a: Int as uint32;
    odds_b: Int as uint32;
    finishDate: Int as uint32;
    total_bet_a: Int as uint32;
    total_bet_b: Int as uint32;

}

message Finalize {
    outcome_a_wins: Bool;
}

message BetInfoInit {
    title: String;
    source: String;
    bet_a_name: String;
    bet_b_name: String;
    image: String;
}

contract TestContract with Deployable, Ownable, Stoppable {
    owner: Address;
    stopped: Bool;
    data: Data;
    seqno: Int as uint64;
    betInfoData: BetInfo;

    init(seqno: Int) {
        self.owner = sender();
        self.stopped = false;
        self.seqno = seqno;
        self.data = Data{
            total_bet_a: 0,
            total_bet_b: 0,
            odds_a: 1000,
            odds_b: 1000,
            bets_a: emptyMap(),
            bets_b: emptyMap(),
            bets_total: emptyMap(),
            finalized: false,
            outcome_a_wins: false,
            insufficient_balance: false
        };
        self.betInfoData = BetInfo{
        title: "",
        source: "",
        bet_a_name: "",
        bet_b_name: "",
        image: "",
        finishDate: -1,
        odds_a: self.data.odds_a,
        odds_b: self.data.odds_b,
        total_bet_a: self.data.total_bet_a,
        total_bet_b: self.data.total_bet_b
    };
    }

    receive(msg: BetInfoInit) {
    require(self.betInfoData.bet_a_name == "" && self.betInfoData.bet_b_name == "" && self.betInfoData.image == "" && self.betInfoData.title == "" && self.betInfoData.source == "", "Already initialized");
    self.betInfoData = BetInfo{
        title: msg.title,
        source: msg.source,
        bet_a_name: msg.bet_a_name,
        bet_b_name: msg.bet_b_name,
        image: msg.image,
        odds_a: self.data.odds_a,
        odds_b: self.data.odds_b,
        finishDate: self.betInfoData.finishDate,
        total_bet_a: self.data.total_bet_a,
        total_bet_b: self.data.total_bet_b
    };
    }

    receive("1") {
        require(!self.data.finalized, "Betting is over");
        let bet_amount: Int = context().value;
        let sender_address: Address = sender();
        self.handle_bet(true, bet_amount);
    }

    receive("2") {
        require(!self.data.finalized, "Betting is over");
        let bet_amount: Int = context().value;
        let sender_address: Address = sender();
        self.handle_bet(false, bet_amount);
    }

    fun handle_bet(bet_on_a: Bool, bet_amount: Int) {
        require(!self.data.finalized, "Betting is over");

        let sender_address: Address = sender();

        if (bet_on_a) {
            self.data.total_bet_a += bet_amount;
            let current_bet: Int? = self.data.bets_a.get(sender_address);
            let final_bet: Int = current_bet != null ? current_bet!! + bet_amount : bet_amount;
            self.data.bets_a.set(sender_address, final_bet);
            self.data.bets_total.set(sender_address, final_bet);
        } else {
            self.data.total_bet_b += bet_amount;
            let current_bet_b: Int? = self.data.bets_b.get(sender_address);
            let final_bet_b: Int = current_bet_b != null ? current_bet_b!! + bet_amount : bet_amount;
            self.data.bets_b.set(sender_address, final_bet_b);
            self.data.bets_total.set(sender_address, final_bet_b);
        }

        // Calculate odds
        if (self.data.total_bet_a > 0) {
            self.data.odds_a = ((self.data.total_bet_b * 1000) / self.data.total_bet_a) * 95 / 100;
        } else {
            self.data.odds_a = 1000; // Default odds if no bets on B
        }

        if (self.data.total_bet_b > 0) {
            self.data.odds_b = ((self.data.total_bet_a * 1000) / self.data.total_bet_b) * 95 / 100;
        } else {
            self.data.odds_b = 1000; // Default odds if no bets on A
        }

        self.betInfoData.odds_a = self.data.odds_a;
        self.betInfoData.odds_b = self.data.odds_b;
    }

    receive(msg: Finalize) {
        require(sender() == self.owner, "Only the owner can finalize");
        self.data.finalized = true;
        self.betInfoData.finishDate = now();
        self.data.outcome_a_wins = msg.outcome_a_wins;
    }

    receive(msg: String) { 
        require(sender() == self.owner, "Only the owner can finalize");
        if (msg == "finalize_true") {
            self.data.outcome_a_wins = true;
            self.data.finalized = true;
        } else if (msg == "PayA") {
            self.data.outcome_a_wins = true;
            self.data.finalized = true;
            self.payout(self.data.bets_a, self.data.odds_a);
        } else if (msg == "PayB") {
            self.data.finalized = true;
            self.payout(self.data.bets_b, self.data.odds_b);
        } else {
            dump("Invalid message received");
        }
    }

    fun calculate_total_payout(bets: map<Address, Int>, odds: Int): Int {
        let total_payout: Int = 0;
        foreach (address, bet_amount in bets) {
            if (bet_amount != null) {
                total_payout += (bet_amount * odds) / 1000 + bet_amount;
            }
        }
        return total_payout;
    }

    fun payout(bets: map<Address, Int>, odds: Int) {
        let total_payout: Int = self.calculate_total_payout(bets, odds);
        let contract_balance: Int = myBalance();
        let payout_ratio_numerator: Int = 1_000_000; // scaling i guess? 
        let payout_ratio_denominator: Int = 1_000_000; // scaling denominator
        if (contract_balance < total_payout) {
            self.data.insufficient_balance = true;
            payout_ratio_numerator = contract_balance * 1_000_000;
            payout_ratio_denominator = total_payout;
        }

        foreach (address, bet_amount in bets) { // gets payout amount
           
            if (self.data.outcome_a_wins) {
                let payout_amount: Int = (bet_amount * odds) / 1000; // reward
                let adjusted_bet_amount: Int = bet_amount * 90 / 100; // initial bet + fee
                let rewards_payoutA: Int = payout_amount + adjusted_bet_amount;
                let total_payout_amount: Int= adjusted_bet_amount + rewards_payoutA;

                if (self.data.insufficient_balance) {
                total_payout_amount = (total_payout_amount * payout_ratio_numerator) / payout_ratio_denominator;

                send(SendParameters{
                    to: address,
                    value: total_payout_amount,
                    mode: SendRemainingValue + SendIgnoreErrors
                });
            }
                else {
                send(SendParameters{
                    to: address,
                    value: rewards_payoutA,
                    mode: SendRemainingValue + SendIgnoreErrors
                });
                }
            } 
            else {
                let payout_amount: Int = (bet_amount * odds) / 1000;
                let adjusted_bet_amount: Int = bet_amount * 90 / 100;
                let rewards_payoutB: Int = payout_amount + adjusted_bet_amount;
                let total_payout_amount: Int= adjusted_bet_amount + rewards_payoutB;
                if (self.data.insufficient_balance) {
                total_payout_amount = (total_payout_amount * payout_ratio_numerator) / payout_ratio_denominator;

                send(SendParameters{
                    to: address,
                    value: total_payout_amount,
                    mode: SendRemainingValue + SendIgnoreErrors
                });
            }
                else {
                send(SendParameters{
                    to: address,
                    value: rewards_payoutB,
                    mode: SendRemainingValue + SendIgnoreErrors
                });
                }
            } 
             
        }
        self.data.finalized = true;
        self.betInfoData.finishDate = now();
    }


    receive("chargeback") {
        self.chargeback(self.data.bets_total);
    }

    fun chargeback(bets: map<Address, Int>) {
    foreach (address, bet_amount in bets) {
        if (bet_amount != null) {
            let refund_amount: Int = bet_amount * 95 / 100;
            send(SendParameters{
                to: address,
                value: refund_amount,
                mode: SendRemainingValue + SendIgnoreErrors
            });
        }
    }
    self.data.finalized = true;
    self.betInfoData.finishDate = now();
}

     receive("withdraw") {
        self.sendRemainingBalanceToOwner();
    }
    
    fun sendRemainingBalanceToOwner() {
    require(sender() == self.owner, "Only the owner can withdraw the remaining balance");
    send(SendParameters{
        to: self.owner,
        value: 0,
        mode: SendRemainingBalance + SendIgnoreErrors
    });
}

    get fun payoutStatus(): Bool {
        return self.data.insufficient_balance;
    }

    get fun getTotalBetA(): Int {
        return self.data.total_bet_a;
    }

    get fun getTotalBetB(): Int {
        return self.data.total_bet_b;
    }

    get fun getBalance(): Int {
        return myBalance();  
    }

    get fun getoddA(): Int {
        return self.data.odds_a;
    }

    get fun getoddB(): Int {
        return self.data.odds_b;
    }

    get fun outcome(): Bool {
        return self.data.outcome_a_wins;
    }

    get fun finalize(): Bool {
        return self.data.finalized;
    }

    get fun getBetInfo(): BetInfo {
        return self.betInfoData;
    }
}

contract TodoParent with Deployable {

    numChildren: Int as uint64;
    BetList: map<Int, Address>;


    init() {
        self.numChildren = 0;
        self.BetList = emptyMap();
    }    

    receive(msg: BetInfoInit) {
        self.numChildren = self.numChildren + 1;
        let init: StateInit = initOf TestContract(self.numChildren);
        let childAddress: Address = contractAddress(init);
        self.BetList.set(self.numChildren, childAddress);
        send(SendParameters{
            to: contractAddress(init),
            value: ton("0.1"),              // pay for message, the deployment and give some TON for storage
            mode: SendIgnoreErrors,
            code: init.code,                // attaching the state init will cause the message to deploy
            data: init.data,
            body: msg.toCell()              // sending the BetInfoInit message
        });
    }

    get fun numChildren(): Int {
        return self.numChildren;
    }

    get fun getAllAddresses(): map<Int, Address> {
        return self.BetList;
    }
}
